{"version":3,"sources":["../../src/InlineSelectControl.jsx"],"names":["React","PropTypes","ImmutablePropTypes","getOptions","getValue","Option","InlineSelectControl","isMultiple","field","props","get","value","isSelectedOption","itemValue","length","includes","onToggleChange","onChange","isCurrentlySelected","filter","item","undefined","render","classNameWrapper","options","name","display","flexWrap","wordBreak","map","Component","propTypes","string","isRequired","oneOfType","arrayOf","listOf","func","shape"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport { getOptions, getValue } from './utils';\nimport Option from './Option';\n\nexport default class InlineSelectControl extends React.Component {\n  isMultiple = () => {\n    const { field } = this.props;\n    return field.get('multiple') === true;\n  };\n\n  getValue = () => {\n    const { value, field } = this.props;\n    return getValue(value, { field });\n  };\n\n  isSelectedOption = (itemValue) => {\n    const value = this.getValue();\n    const isMultiple = this.isMultiple();\n\n    if (isMultiple) {\n      return !!(value && value.length && value.includes(itemValue));\n    }\n    return !!(value && value === itemValue);\n  };\n\n  onToggleChange = (itemValue) => {\n    const { onChange } = this.props;\n    const value = this.getValue();\n    const isMultiple = this.isMultiple();\n    const isCurrentlySelected = this.isSelectedOption(itemValue);\n\n    if (isMultiple) {\n      onChange(\n        isCurrentlySelected ? value.filter((item) => item !== itemValue) : [...value, itemValue]\n      );\n    } else {\n      onChange(isCurrentlySelected ? undefined : itemValue);\n    }\n  };\n\n  render() {\n    const { field, classNameWrapper } = this.props;\n    const options = getOptions({ field });\n    const name = field.get('name');\n\n    if (options.length === 0) {\n      return <div>Error rendering inline-select control for {name}: No options</div>;\n    }\n\n    const isMultiple = this.isMultiple();\n\n    return (\n      <div className={classNameWrapper}>\n        <div\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            wordBreak: 'break-all',\n          }}\n        >\n          {options.map((item) => (\n            <Option\n              {...item}\n              key={item.value}\n              name={name}\n              selected={this.isSelectedOption(item.value)}\n              onChange={() => this.onToggleChange(item.value)}\n              multiple={isMultiple}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nInlineSelectControl.propTypes = {\n  classNameWrapper: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n    ImmutablePropTypes.listOf(PropTypes.string),\n  ]),\n  onChange: PropTypes.func.isRequired,\n  field: PropTypes.shape({\n    get: PropTypes.func.isRequired,\n  }).isRequired,\n};\n"],"file":"InlineSelectControl.js"}