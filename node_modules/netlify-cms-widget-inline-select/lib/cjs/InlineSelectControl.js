"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _utils = require("./utils");

var _Option = _interopRequireDefault(require("./Option"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InlineSelectControl = /*#__PURE__*/function (_React$Component) {
  _inherits(InlineSelectControl, _React$Component);

  var _super = _createSuper(InlineSelectControl);

  function InlineSelectControl() {
    var _this;

    _classCallCheck(this, InlineSelectControl);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "isMultiple", function () {
      var field = _this.props.field;
      return field.get('multiple') === true;
    });

    _defineProperty(_assertThisInitialized(_this), "getValue", function () {
      var _this$props = _this.props,
          value = _this$props.value,
          field = _this$props.field;
      return (0, _utils.getValue)(value, {
        field: field
      });
    });

    _defineProperty(_assertThisInitialized(_this), "isSelectedOption", function (itemValue) {
      var value = _this.getValue();

      var isMultiple = _this.isMultiple();

      if (isMultiple) {
        return !!(value && value.length && value.includes(itemValue));
      }

      return !!(value && value === itemValue);
    });

    _defineProperty(_assertThisInitialized(_this), "onToggleChange", function (itemValue) {
      var onChange = _this.props.onChange;

      var value = _this.getValue();

      var isMultiple = _this.isMultiple();

      var isCurrentlySelected = _this.isSelectedOption(itemValue);

      if (isMultiple) {
        onChange(isCurrentlySelected ? value.filter(function (item) {
          return item !== itemValue;
        }) : [].concat(_toConsumableArray(value), [itemValue]));
      } else {
        onChange(isCurrentlySelected ? undefined : itemValue);
      }
    });

    return _this;
  }

  _createClass(InlineSelectControl, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          field = _this$props2.field,
          classNameWrapper = _this$props2.classNameWrapper;
      var options = (0, _utils.getOptions)({
        field: field
      });
      var name = field.get('name');

      if (options.length === 0) {
        return /*#__PURE__*/_react["default"].createElement("div", null, "Error rendering inline-select control for ", name, ": No options");
      }

      var isMultiple = this.isMultiple();
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: classNameWrapper
      }, /*#__PURE__*/_react["default"].createElement("div", {
        style: {
          display: 'flex',
          flexWrap: 'wrap',
          wordBreak: 'break-all'
        }
      }, options.map(function (item) {
        return /*#__PURE__*/_react["default"].createElement(_Option["default"], _extends({}, item, {
          key: item.value,
          name: name,
          selected: _this2.isSelectedOption(item.value),
          onChange: function onChange() {
            return _this2.onToggleChange(item.value);
          },
          multiple: isMultiple
        }));
      })));
    }
  }]);

  return InlineSelectControl;
}(_react["default"].Component);

exports["default"] = InlineSelectControl;
InlineSelectControl.propTypes = {
  classNameWrapper: _propTypes["default"].string.isRequired,
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].string), _reactImmutableProptypes["default"].listOf(_propTypes["default"].string)]),
  onChange: _propTypes["default"].func.isRequired,
  field: _propTypes["default"].shape({
    get: _propTypes["default"].func.isRequired
  }).isRequired
};
//# sourceMappingURL=InlineSelectControl.js.map