{"version":3,"sources":["../../src/InlineSelectControl.jsx"],"names":["InlineSelectControl","field","props","get","value","itemValue","getValue","isMultiple","length","includes","onChange","isCurrentlySelected","isSelectedOption","filter","item","undefined","classNameWrapper","options","name","display","flexWrap","wordBreak","map","onToggleChange","React","Component","propTypes","PropTypes","string","isRequired","oneOfType","arrayOf","ImmutablePropTypes","listOf","func","shape"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport { getOptions, getValue } from './utils';\nimport Option from './Option';\n\nexport default class InlineSelectControl extends React.Component {\n  isMultiple = () => {\n    const { field } = this.props;\n    return field.get('multiple') === true;\n  };\n\n  getValue = () => {\n    const { value, field } = this.props;\n    return getValue(value, { field });\n  };\n\n  isSelectedOption = (itemValue) => {\n    const value = this.getValue();\n    const isMultiple = this.isMultiple();\n\n    if (isMultiple) {\n      return !!(value && value.length && value.includes(itemValue));\n    }\n    return !!(value && value === itemValue);\n  };\n\n  onToggleChange = (itemValue) => {\n    const { onChange } = this.props;\n    const value = this.getValue();\n    const isMultiple = this.isMultiple();\n    const isCurrentlySelected = this.isSelectedOption(itemValue);\n\n    if (isMultiple) {\n      onChange(\n        isCurrentlySelected ? value.filter((item) => item !== itemValue) : [...value, itemValue]\n      );\n    } else {\n      onChange(isCurrentlySelected ? undefined : itemValue);\n    }\n  };\n\n  render() {\n    const { field, classNameWrapper } = this.props;\n    const options = getOptions({ field });\n    const name = field.get('name');\n\n    if (options.length === 0) {\n      return <div>Error rendering inline-select control for {name}: No options</div>;\n    }\n\n    const isMultiple = this.isMultiple();\n\n    return (\n      <div className={classNameWrapper}>\n        <div\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            wordBreak: 'break-all',\n          }}\n        >\n          {options.map((item) => (\n            <Option\n              {...item}\n              key={item.value}\n              name={name}\n              selected={this.isSelectedOption(item.value)}\n              onChange={() => this.onToggleChange(item.value)}\n              multiple={isMultiple}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nInlineSelectControl.propTypes = {\n  classNameWrapper: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n    ImmutablePropTypes.listOf(PropTypes.string),\n  ]),\n  onChange: PropTypes.func.isRequired,\n  field: PropTypes.shape({\n    get: PropTypes.func.isRequired,\n  }).isRequired,\n};\n"],"file":"InlineSelectControl.js"}