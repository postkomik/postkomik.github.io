"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _immutable = require("immutable");

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _InlineSelectControl = _interopRequireDefault(require("./InlineSelectControl"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var options = [{
  value: 'Foo',
  label: 'Foo'
}, {
  value: 'Bar',
  label: 'Bar'
}, {
  value: 'Baz',
  label: 'Baz'
}];

var InlineSelectController = /*#__PURE__*/function (_React$Component) {
  _inherits(InlineSelectController, _React$Component);

  var _super = _createSuper(InlineSelectController);

  function InlineSelectController(props) {
    var _this;

    _classCallCheck(this, InlineSelectController);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "handleOnChange", jest.fn(function (value) {
      _this.setState({
        value: value
      });
    }));

    _this.state = {
      value: props.defaultValue // eslint-disable-line react/prop-types

    };
    return _this;
  }

  _createClass(InlineSelectController, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var onStateChange = this.props.onStateChange;
      onStateChange(this.state);
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      var value = this.state.value;
      return children({
        value: value,
        handleOnChange: this.handleOnChange
      });
    }
  }]);

  return InlineSelectController;
}(_react["default"].Component);

InlineSelectController.propTypes = {
  children: _propTypes["default"].func.isRequired,
  onStateChange: _propTypes["default"].func.isRequired
};

function setup(_ref) {
  var field = _ref.field,
      defaultValue = _ref.defaultValue;
  var renderArgs;
  var stateChangeSpy = jest.fn();
  var setActiveSpy = jest.fn();
  var setInactiveSpy = jest.fn();
  var helpers = (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(InlineSelectController, {
    defaultValue: defaultValue,
    onStateChange: stateChangeSpy
  }, function (_ref2) {
    var value = _ref2.value,
        handleOnChange = _ref2.handleOnChange;
    renderArgs = {
      value: value,
      onChangeSpy: handleOnChange
    };
    return /*#__PURE__*/_react["default"].createElement(_InlineSelectControl["default"], {
      field: field,
      value: value,
      onChange: handleOnChange,
      forID: "inline-select",
      classNameWrapper: "",
      setActiveStyle: setActiveSpy,
      setInactiveStyle: setInactiveSpy
    });
  }));
  return _objectSpread(_objectSpread(_objectSpread({}, helpers), renderArgs), {}, {
    stateChangeSpy: stateChangeSpy,
    setActiveSpy: setActiveSpy,
    setInactiveSpy: setInactiveSpy
  });
}

describe('InlineSelectControl', function () {
  describe('radios', function () {
    var expectRadioInput = function expectRadioInput(element) {
      var checked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      expect(element).toBeInTheDocument();
      expect(element.type).toEqual('radio');
      expect(element.checked).toBe(checked);
    };

    it('should respect value', function () {
      var field = (0, _immutable.fromJS)({
        options: options,
        name: 'radio_1'
      });

      var _setup = setup({
        field: field,
        defaultValue: options[2].value
      }),
          getByLabelText = _setup.getByLabelText;

      expectRadioInput(getByLabelText('Foo'));
      expectRadioInput(getByLabelText('Bar'));
      expectRadioInput(getByLabelText('Baz'), true);
    });
    it('should call onChange with correct selectedItem', function () {
      var field = (0, _immutable.fromJS)({
        options: options,
        name: 'radio_1'
      });

      var _setup2 = setup({
        field: field
      }),
          getByLabelText = _setup2.getByLabelText,
          onChangeSpy = _setup2.onChangeSpy;

      expectRadioInput(getByLabelText('Foo'));
      expectRadioInput(getByLabelText('Bar'));
      expectRadioInput(getByLabelText('Baz'));

      _react2.fireEvent.click(getByLabelText('Foo'));

      expect(onChangeSpy).toHaveBeenCalledTimes(1);
      expect(onChangeSpy).toHaveBeenCalledWith(options[0].value);
    });
  });
  describe('checkboxes', function () {
    var expectCheckboxInput = function expectCheckboxInput(element) {
      var checked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      expect(element).toBeInTheDocument();
      expect(element.type).toEqual('checkbox');
      expect(element.checked).toBe(checked);
    };

    it('should respect value', function () {
      var field = (0, _immutable.fromJS)({
        options: options,
        name: 'checkbox_1',
        multiple: true
      });

      var _setup3 = setup({
        field: field,
        defaultValue: (0, _immutable.fromJS)([options[1].value, options[2].value])
      }),
          getByLabelText = _setup3.getByLabelText;

      expectCheckboxInput(getByLabelText('Foo'));
      expectCheckboxInput(getByLabelText('Bar'), true);
      expectCheckboxInput(getByLabelText('Baz'), true);
    });
    it('should call onChange with correct selectedItem', function () {
      var field = (0, _immutable.fromJS)({
        options: options,
        name: 'checkbox_1',
        multiple: true
      });

      var _setup4 = setup({
        field: field
      }),
          getByLabelText = _setup4.getByLabelText,
          onChangeSpy = _setup4.onChangeSpy;

      expectCheckboxInput(getByLabelText('Foo'));
      expectCheckboxInput(getByLabelText('Bar'));
      expectCheckboxInput(getByLabelText('Baz'));

      _react2.fireEvent.click(getByLabelText('Foo'));

      _react2.fireEvent.click(getByLabelText('Baz'));

      expect(onChangeSpy).toHaveBeenCalledTimes(2);
      expect(onChangeSpy).toHaveBeenCalledWith([options[0].value]);
      expect(onChangeSpy).toHaveBeenCalledWith([options[0].value, options[2].value]);
    });
  });
});
//# sourceMappingURL=InlineSelectControl.test.js.map