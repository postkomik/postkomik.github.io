"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _constants = require("./constants");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Option = /*#__PURE__*/function (_React$Component) {
  _inherits(Option, _React$Component);

  var _super = _createSuper(Option);

  function Option(props) {
    var _this;

    _classCallCheck(this, Option);

    _this = _super.call(this, props);
    _this.id = (0, _utils.getGUID)();
    return _this;
  }

  _createClass(Option, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          name = _this$props.name,
          value = _this$props.value,
          label = _this$props.label,
          onChange = _this$props.onChange,
          selected = _this$props.selected,
          multiple = _this$props.multiple;
      var id = "".concat(this.id, "_").concat(value);
      return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("style", null, ".".concat(_constants.NAME, "__option:hover { filter: invert(15%); }")), /*#__PURE__*/_react["default"].createElement("span", {
        className: "".concat(_constants.NAME, "__option"),
        style: {
          padding: '2px 6px',
          margin: 2,
          color: selected ? 'white' : 'inherit',
          backgroundColor: selected ? _netlifyCmsUiDefault.colorsRaw.blue : _netlifyCmsUiDefault.colorsRaw.grayLight,
          border: '2px solid transparent',
          borderRadius: 5
        }
      }, /*#__PURE__*/_react["default"].createElement("label", {
        htmlFor: id,
        style: {
          cursor: 'pointer',
          paddingRight: 2,
          display: 'flex',
          alignItems: 'center'
        }
      }, /*#__PURE__*/_react["default"].createElement("input", {
        id: id,
        style: {
          marginRight: 6
        },
        type: multiple ? 'checkbox' : 'radio',
        name: name,
        checked: selected,
        onChange: function onChange() {
          return null;
        },
        onClick: function onClick() {
          return onChange();
        }
      }), /*#__PURE__*/_react["default"].createElement("span", null, label))));
    }
  }]);

  return Option;
}(_react["default"].Component);

exports["default"] = Option;
Option.propTypes = {
  name: _propTypes["default"].string.isRequired,
  value: _propTypes["default"].string.isRequired,
  label: _propTypes["default"].node.isRequired,
  onChange: _propTypes["default"].func.isRequired,
  selected: _propTypes["default"].bool.isRequired,
  multiple: _propTypes["default"].bool
};
//# sourceMappingURL=Option.js.map